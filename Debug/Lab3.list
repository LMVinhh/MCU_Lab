
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b08  08002b08  00012b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b28  08002b28  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002b28  08002b28  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b28  08002b28  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000050  08002b80  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002b80  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f96  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de3  00000000  00000000  0002a00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017369  00000000  00000000  0002d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf7d  00000000  00000000  00044601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082326  00000000  00000000  0005157e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d38a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a38  00000000  00000000  000d38f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002af0 	.word	0x08002af0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002af0 	.word	0x08002af0

0800014c <display7_seg>:
 *  Created on: Nov 4, 2022
 *      Author: ASUS
 */
#include "SEVEN_SEGMENT.h"

 void display7_seg(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
		  // VARIABLES a,b,c,d,e,f,g ARE DEFINED BY THESE SPECIFIC DESCRIPTION ABOVE.
		  // DISLAY NUMBER 0
			if(num == 0){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d123      	bne.n	80001a2 <display7_seg+0x56>
				HAL_GPIO_WritePin (  a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 800015a:	2200      	movs	r2, #0
 800015c:	2101      	movs	r1, #1
 800015e:	48c2      	ldr	r0, [pc, #776]	; (8000468 <display7_seg+0x31c>)
 8000160:	f001 fc9d 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 8000164:	2200      	movs	r2, #0
 8000166:	2102      	movs	r1, #2
 8000168:	48bf      	ldr	r0, [pc, #764]	; (8000468 <display7_seg+0x31c>)
 800016a:	f001 fc98 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 800016e:	2200      	movs	r2, #0
 8000170:	2104      	movs	r1, #4
 8000172:	48bd      	ldr	r0, [pc, #756]	; (8000468 <display7_seg+0x31c>)
 8000174:	f001 fc93 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
 8000178:	2200      	movs	r2, #0
 800017a:	2108      	movs	r1, #8
 800017c:	48ba      	ldr	r0, [pc, #744]	; (8000468 <display7_seg+0x31c>)
 800017e:	f001 fc8e 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_RESET );
 8000182:	2200      	movs	r2, #0
 8000184:	2110      	movs	r1, #16
 8000186:	48b8      	ldr	r0, [pc, #736]	; (8000468 <display7_seg+0x31c>)
 8000188:	f001 fc89 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_RESET );
 800018c:	2200      	movs	r2, #0
 800018e:	2120      	movs	r1, #32
 8000190:	48b5      	ldr	r0, [pc, #724]	; (8000468 <display7_seg+0x31c>)
 8000192:	f001 fc84 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_SET );
 8000196:	2201      	movs	r2, #1
 8000198:	2140      	movs	r1, #64	; 0x40
 800019a:	48b3      	ldr	r0, [pc, #716]	; (8000468 <display7_seg+0x31c>)
 800019c:	f001 fc7f 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_SET );
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_RESET );
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
			}
	}
 80001a0:	e15d      	b.n	800045e <display7_seg+0x312>
			else if(num == 1){
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d123      	bne.n	80001f0 <display7_seg+0xa4>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_SET );
 80001a8:	2201      	movs	r2, #1
 80001aa:	2101      	movs	r1, #1
 80001ac:	48ae      	ldr	r0, [pc, #696]	; (8000468 <display7_seg+0x31c>)
 80001ae:	f001 fc76 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 80001b2:	2200      	movs	r2, #0
 80001b4:	2102      	movs	r1, #2
 80001b6:	48ac      	ldr	r0, [pc, #688]	; (8000468 <display7_seg+0x31c>)
 80001b8:	f001 fc71 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 80001bc:	2200      	movs	r2, #0
 80001be:	2104      	movs	r1, #4
 80001c0:	48a9      	ldr	r0, [pc, #676]	; (8000468 <display7_seg+0x31c>)
 80001c2:	f001 fc6c 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_SET );
 80001c6:	2201      	movs	r2, #1
 80001c8:	2108      	movs	r1, #8
 80001ca:	48a7      	ldr	r0, [pc, #668]	; (8000468 <display7_seg+0x31c>)
 80001cc:	f001 fc67 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_SET );
 80001d0:	2201      	movs	r2, #1
 80001d2:	2110      	movs	r1, #16
 80001d4:	48a4      	ldr	r0, [pc, #656]	; (8000468 <display7_seg+0x31c>)
 80001d6:	f001 fc62 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_SET );
 80001da:	2201      	movs	r2, #1
 80001dc:	2120      	movs	r1, #32
 80001de:	48a2      	ldr	r0, [pc, #648]	; (8000468 <display7_seg+0x31c>)
 80001e0:	f001 fc5d 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_SET );
 80001e4:	2201      	movs	r2, #1
 80001e6:	2140      	movs	r1, #64	; 0x40
 80001e8:	489f      	ldr	r0, [pc, #636]	; (8000468 <display7_seg+0x31c>)
 80001ea:	f001 fc58 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 80001ee:	e136      	b.n	800045e <display7_seg+0x312>
			else if(num == 2){
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	d123      	bne.n	800023e <display7_seg+0xf2>
					HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 80001f6:	2200      	movs	r2, #0
 80001f8:	2101      	movs	r1, #1
 80001fa:	489b      	ldr	r0, [pc, #620]	; (8000468 <display7_seg+0x31c>)
 80001fc:	f001 fc4f 	bl	8001a9e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 8000200:	2200      	movs	r2, #0
 8000202:	2102      	movs	r1, #2
 8000204:	4898      	ldr	r0, [pc, #608]	; (8000468 <display7_seg+0x31c>)
 8000206:	f001 fc4a 	bl	8001a9e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_SET );
 800020a:	2201      	movs	r2, #1
 800020c:	2104      	movs	r1, #4
 800020e:	4896      	ldr	r0, [pc, #600]	; (8000468 <display7_seg+0x31c>)
 8000210:	f001 fc45 	bl	8001a9e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
 8000214:	2200      	movs	r2, #0
 8000216:	2108      	movs	r1, #8
 8000218:	4893      	ldr	r0, [pc, #588]	; (8000468 <display7_seg+0x31c>)
 800021a:	f001 fc40 	bl	8001a9e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_RESET );
 800021e:	2200      	movs	r2, #0
 8000220:	2110      	movs	r1, #16
 8000222:	4891      	ldr	r0, [pc, #580]	; (8000468 <display7_seg+0x31c>)
 8000224:	f001 fc3b 	bl	8001a9e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_SET );
 8000228:	2201      	movs	r2, #1
 800022a:	2120      	movs	r1, #32
 800022c:	488e      	ldr	r0, [pc, #568]	; (8000468 <display7_seg+0x31c>)
 800022e:	f001 fc36 	bl	8001a9e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
 8000232:	2200      	movs	r2, #0
 8000234:	2140      	movs	r1, #64	; 0x40
 8000236:	488c      	ldr	r0, [pc, #560]	; (8000468 <display7_seg+0x31c>)
 8000238:	f001 fc31 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 800023c:	e10f      	b.n	800045e <display7_seg+0x312>
			else if(num == 3){
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2b03      	cmp	r3, #3
 8000242:	d123      	bne.n	800028c <display7_seg+0x140>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 8000244:	2200      	movs	r2, #0
 8000246:	2101      	movs	r1, #1
 8000248:	4887      	ldr	r0, [pc, #540]	; (8000468 <display7_seg+0x31c>)
 800024a:	f001 fc28 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 800024e:	2200      	movs	r2, #0
 8000250:	2102      	movs	r1, #2
 8000252:	4885      	ldr	r0, [pc, #532]	; (8000468 <display7_seg+0x31c>)
 8000254:	f001 fc23 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 8000258:	2200      	movs	r2, #0
 800025a:	2104      	movs	r1, #4
 800025c:	4882      	ldr	r0, [pc, #520]	; (8000468 <display7_seg+0x31c>)
 800025e:	f001 fc1e 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
 8000262:	2200      	movs	r2, #0
 8000264:	2108      	movs	r1, #8
 8000266:	4880      	ldr	r0, [pc, #512]	; (8000468 <display7_seg+0x31c>)
 8000268:	f001 fc19 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_SET );
 800026c:	2201      	movs	r2, #1
 800026e:	2110      	movs	r1, #16
 8000270:	487d      	ldr	r0, [pc, #500]	; (8000468 <display7_seg+0x31c>)
 8000272:	f001 fc14 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_SET );
 8000276:	2201      	movs	r2, #1
 8000278:	2120      	movs	r1, #32
 800027a:	487b      	ldr	r0, [pc, #492]	; (8000468 <display7_seg+0x31c>)
 800027c:	f001 fc0f 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	4878      	ldr	r0, [pc, #480]	; (8000468 <display7_seg+0x31c>)
 8000286:	f001 fc0a 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 800028a:	e0e8      	b.n	800045e <display7_seg+0x312>
			else if(num == 4){
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b04      	cmp	r3, #4
 8000290:	d123      	bne.n	80002da <display7_seg+0x18e>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_SET );
 8000292:	2201      	movs	r2, #1
 8000294:	2101      	movs	r1, #1
 8000296:	4874      	ldr	r0, [pc, #464]	; (8000468 <display7_seg+0x31c>)
 8000298:	f001 fc01 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 800029c:	2200      	movs	r2, #0
 800029e:	2102      	movs	r1, #2
 80002a0:	4871      	ldr	r0, [pc, #452]	; (8000468 <display7_seg+0x31c>)
 80002a2:	f001 fbfc 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 80002a6:	2200      	movs	r2, #0
 80002a8:	2104      	movs	r1, #4
 80002aa:	486f      	ldr	r0, [pc, #444]	; (8000468 <display7_seg+0x31c>)
 80002ac:	f001 fbf7 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_SET );
 80002b0:	2201      	movs	r2, #1
 80002b2:	2108      	movs	r1, #8
 80002b4:	486c      	ldr	r0, [pc, #432]	; (8000468 <display7_seg+0x31c>)
 80002b6:	f001 fbf2 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_SET );
 80002ba:	2201      	movs	r2, #1
 80002bc:	2110      	movs	r1, #16
 80002be:	486a      	ldr	r0, [pc, #424]	; (8000468 <display7_seg+0x31c>)
 80002c0:	f001 fbed 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_RESET );
 80002c4:	2200      	movs	r2, #0
 80002c6:	2120      	movs	r1, #32
 80002c8:	4867      	ldr	r0, [pc, #412]	; (8000468 <display7_seg+0x31c>)
 80002ca:	f001 fbe8 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
 80002ce:	2200      	movs	r2, #0
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	4865      	ldr	r0, [pc, #404]	; (8000468 <display7_seg+0x31c>)
 80002d4:	f001 fbe3 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 80002d8:	e0c1      	b.n	800045e <display7_seg+0x312>
			else if(num == 5){
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b05      	cmp	r3, #5
 80002de:	d123      	bne.n	8000328 <display7_seg+0x1dc>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 80002e0:	2200      	movs	r2, #0
 80002e2:	2101      	movs	r1, #1
 80002e4:	4860      	ldr	r0, [pc, #384]	; (8000468 <display7_seg+0x31c>)
 80002e6:	f001 fbda 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_SET );
 80002ea:	2201      	movs	r2, #1
 80002ec:	2102      	movs	r1, #2
 80002ee:	485e      	ldr	r0, [pc, #376]	; (8000468 <display7_seg+0x31c>)
 80002f0:	f001 fbd5 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 80002f4:	2200      	movs	r2, #0
 80002f6:	2104      	movs	r1, #4
 80002f8:	485b      	ldr	r0, [pc, #364]	; (8000468 <display7_seg+0x31c>)
 80002fa:	f001 fbd0 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
 80002fe:	2200      	movs	r2, #0
 8000300:	2108      	movs	r1, #8
 8000302:	4859      	ldr	r0, [pc, #356]	; (8000468 <display7_seg+0x31c>)
 8000304:	f001 fbcb 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_SET );
 8000308:	2201      	movs	r2, #1
 800030a:	2110      	movs	r1, #16
 800030c:	4856      	ldr	r0, [pc, #344]	; (8000468 <display7_seg+0x31c>)
 800030e:	f001 fbc6 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_RESET );
 8000312:	2200      	movs	r2, #0
 8000314:	2120      	movs	r1, #32
 8000316:	4854      	ldr	r0, [pc, #336]	; (8000468 <display7_seg+0x31c>)
 8000318:	f001 fbc1 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
 800031c:	2200      	movs	r2, #0
 800031e:	2140      	movs	r1, #64	; 0x40
 8000320:	4851      	ldr	r0, [pc, #324]	; (8000468 <display7_seg+0x31c>)
 8000322:	f001 fbbc 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 8000326:	e09a      	b.n	800045e <display7_seg+0x312>
			else if(num == 6){
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b06      	cmp	r3, #6
 800032c:	d123      	bne.n	8000376 <display7_seg+0x22a>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 800032e:	2200      	movs	r2, #0
 8000330:	2101      	movs	r1, #1
 8000332:	484d      	ldr	r0, [pc, #308]	; (8000468 <display7_seg+0x31c>)
 8000334:	f001 fbb3 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_SET );
 8000338:	2201      	movs	r2, #1
 800033a:	2102      	movs	r1, #2
 800033c:	484a      	ldr	r0, [pc, #296]	; (8000468 <display7_seg+0x31c>)
 800033e:	f001 fbae 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 8000342:	2200      	movs	r2, #0
 8000344:	2104      	movs	r1, #4
 8000346:	4848      	ldr	r0, [pc, #288]	; (8000468 <display7_seg+0x31c>)
 8000348:	f001 fba9 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
 800034c:	2200      	movs	r2, #0
 800034e:	2108      	movs	r1, #8
 8000350:	4845      	ldr	r0, [pc, #276]	; (8000468 <display7_seg+0x31c>)
 8000352:	f001 fba4 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_RESET );
 8000356:	2200      	movs	r2, #0
 8000358:	2110      	movs	r1, #16
 800035a:	4843      	ldr	r0, [pc, #268]	; (8000468 <display7_seg+0x31c>)
 800035c:	f001 fb9f 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_RESET );
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4840      	ldr	r0, [pc, #256]	; (8000468 <display7_seg+0x31c>)
 8000366:	f001 fb9a 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
 800036a:	2200      	movs	r2, #0
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	483e      	ldr	r0, [pc, #248]	; (8000468 <display7_seg+0x31c>)
 8000370:	f001 fb95 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 8000374:	e073      	b.n	800045e <display7_seg+0x312>
			else if(num == 7){
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2b07      	cmp	r3, #7
 800037a:	d123      	bne.n	80003c4 <display7_seg+0x278>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 800037c:	2200      	movs	r2, #0
 800037e:	2101      	movs	r1, #1
 8000380:	4839      	ldr	r0, [pc, #228]	; (8000468 <display7_seg+0x31c>)
 8000382:	f001 fb8c 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 8000386:	2200      	movs	r2, #0
 8000388:	2102      	movs	r1, #2
 800038a:	4837      	ldr	r0, [pc, #220]	; (8000468 <display7_seg+0x31c>)
 800038c:	f001 fb87 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 8000390:	2200      	movs	r2, #0
 8000392:	2104      	movs	r1, #4
 8000394:	4834      	ldr	r0, [pc, #208]	; (8000468 <display7_seg+0x31c>)
 8000396:	f001 fb82 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_SET );
 800039a:	2201      	movs	r2, #1
 800039c:	2108      	movs	r1, #8
 800039e:	4832      	ldr	r0, [pc, #200]	; (8000468 <display7_seg+0x31c>)
 80003a0:	f001 fb7d 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_SET );
 80003a4:	2201      	movs	r2, #1
 80003a6:	2110      	movs	r1, #16
 80003a8:	482f      	ldr	r0, [pc, #188]	; (8000468 <display7_seg+0x31c>)
 80003aa:	f001 fb78 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_SET );
 80003ae:	2201      	movs	r2, #1
 80003b0:	2120      	movs	r1, #32
 80003b2:	482d      	ldr	r0, [pc, #180]	; (8000468 <display7_seg+0x31c>)
 80003b4:	f001 fb73 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_SET );
 80003b8:	2201      	movs	r2, #1
 80003ba:	2140      	movs	r1, #64	; 0x40
 80003bc:	482a      	ldr	r0, [pc, #168]	; (8000468 <display7_seg+0x31c>)
 80003be:	f001 fb6e 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 80003c2:	e04c      	b.n	800045e <display7_seg+0x312>
			else if(num == 8){
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d123      	bne.n	8000412 <display7_seg+0x2c6>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 80003ca:	2200      	movs	r2, #0
 80003cc:	2101      	movs	r1, #1
 80003ce:	4826      	ldr	r0, [pc, #152]	; (8000468 <display7_seg+0x31c>)
 80003d0:	f001 fb65 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 80003d4:	2200      	movs	r2, #0
 80003d6:	2102      	movs	r1, #2
 80003d8:	4823      	ldr	r0, [pc, #140]	; (8000468 <display7_seg+0x31c>)
 80003da:	f001 fb60 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 80003de:	2200      	movs	r2, #0
 80003e0:	2104      	movs	r1, #4
 80003e2:	4821      	ldr	r0, [pc, #132]	; (8000468 <display7_seg+0x31c>)
 80003e4:	f001 fb5b 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
 80003e8:	2200      	movs	r2, #0
 80003ea:	2108      	movs	r1, #8
 80003ec:	481e      	ldr	r0, [pc, #120]	; (8000468 <display7_seg+0x31c>)
 80003ee:	f001 fb56 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_RESET );
 80003f2:	2200      	movs	r2, #0
 80003f4:	2110      	movs	r1, #16
 80003f6:	481c      	ldr	r0, [pc, #112]	; (8000468 <display7_seg+0x31c>)
 80003f8:	f001 fb51 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_RESET );
 80003fc:	2200      	movs	r2, #0
 80003fe:	2120      	movs	r1, #32
 8000400:	4819      	ldr	r0, [pc, #100]	; (8000468 <display7_seg+0x31c>)
 8000402:	f001 fb4c 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
 8000406:	2200      	movs	r2, #0
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	4817      	ldr	r0, [pc, #92]	; (8000468 <display7_seg+0x31c>)
 800040c:	f001 fb47 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 8000410:	e025      	b.n	800045e <display7_seg+0x312>
			else if(num == 9){
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b09      	cmp	r3, #9
 8000416:	d122      	bne.n	800045e <display7_seg+0x312>
				HAL_GPIO_WritePin ( a_7SEG_GPIO_Port , a_7SEG_Pin ,GPIO_PIN_RESET );
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	4812      	ldr	r0, [pc, #72]	; (8000468 <display7_seg+0x31c>)
 800041e:	f001 fb3e 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( b_7SEG_GPIO_Port , b_7SEG_Pin ,GPIO_PIN_RESET );
 8000422:	2200      	movs	r2, #0
 8000424:	2102      	movs	r1, #2
 8000426:	4810      	ldr	r0, [pc, #64]	; (8000468 <display7_seg+0x31c>)
 8000428:	f001 fb39 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( c_7SEG_GPIO_Port , c_7SEG_Pin ,GPIO_PIN_RESET );
 800042c:	2200      	movs	r2, #0
 800042e:	2104      	movs	r1, #4
 8000430:	480d      	ldr	r0, [pc, #52]	; (8000468 <display7_seg+0x31c>)
 8000432:	f001 fb34 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( d_7SEG_GPIO_Port ,	d_7SEG_Pin ,GPIO_PIN_RESET );
 8000436:	2200      	movs	r2, #0
 8000438:	2108      	movs	r1, #8
 800043a:	480b      	ldr	r0, [pc, #44]	; (8000468 <display7_seg+0x31c>)
 800043c:	f001 fb2f 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( e_7SEG_GPIO_Port , e_7SEG_Pin ,GPIO_PIN_SET );
 8000440:	2201      	movs	r2, #1
 8000442:	2110      	movs	r1, #16
 8000444:	4808      	ldr	r0, [pc, #32]	; (8000468 <display7_seg+0x31c>)
 8000446:	f001 fb2a 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( f_7SEG_GPIO_Port , f_7SEG_Pin ,GPIO_PIN_RESET );
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	4806      	ldr	r0, [pc, #24]	; (8000468 <display7_seg+0x31c>)
 8000450:	f001 fb25 	bl	8001a9e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( g_7SEG_GPIO_Port , g_7SEG_Pin ,GPIO_PIN_RESET );
 8000454:	2200      	movs	r2, #0
 8000456:	2140      	movs	r1, #64	; 0x40
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <display7_seg+0x31c>)
 800045a:	f001 fb20 	bl	8001a9e <HAL_GPIO_WritePin>
	}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00

0800046c <subKeyProcess>:
int KeyReg2[Buttons]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};
int KeyReg3[Buttons]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeforKeyPress = 200;

void subKeyProcess(int i){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	if(i == 0){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d102      	bne.n	8000480 <subKeyProcess+0x14>
		button1_flag = 1;
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <subKeyProcess+0x38>)
 800047c:	2201      	movs	r2, #1
 800047e:	601a      	str	r2, [r3, #0]
	}
	if(i == 1){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d102      	bne.n	800048c <subKeyProcess+0x20>
			button2_flag = 1;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <subKeyProcess+0x3c>)
 8000488:	2201      	movs	r2, #1
 800048a:	601a      	str	r2, [r3, #0]
		}
	if(i == 2){
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b02      	cmp	r3, #2
 8000490:	d102      	bne.n	8000498 <subKeyProcess+0x2c>
			button3_flag = 1;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <subKeyProcess+0x40>)
 8000494:	2201      	movs	r2, #1
 8000496:	601a      	str	r2, [r3, #0]
		}
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	2000006c 	.word	0x2000006c
 80004a8:	20000070 	.word	0x20000070
 80004ac:	20000074 	.word	0x20000074

080004b0 <subKeyProcessLong>:
void subKeyProcessLong(int i){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	if(i == 0){
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d102      	bne.n	80004c4 <subKeyProcessLong+0x14>
		button1_flagLong = 1;
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <subKeyProcessLong+0x38>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	601a      	str	r2, [r3, #0]
		}
		if(i == 1){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d102      	bne.n	80004d0 <subKeyProcessLong+0x20>
			button2_flagLong = 1;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <subKeyProcessLong+0x3c>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	601a      	str	r2, [r3, #0]
			}
		if(i == 2){
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d102      	bne.n	80004dc <subKeyProcessLong+0x2c>
			button3_flagLong = 1;
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <subKeyProcessLong+0x40>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
			}
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000078 	.word	0x20000078
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	20000080 	.word	0x20000080

080004f4 <getKeyInput>:
void getKeyInput(){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	for (int i = 0 ;i < 3 ;i++){
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	e086      	b.n	800060e <getKeyInput+0x11a>
	KeyReg0[i] = KeyReg1[i];
 8000500:	4a47      	ldr	r2, [pc, #284]	; (8000620 <getKeyInput+0x12c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000508:	4946      	ldr	r1, [pc, #280]	; (8000624 <getKeyInput+0x130>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[i]= KeyReg2[i];
 8000510:	4a45      	ldr	r2, [pc, #276]	; (8000628 <getKeyInput+0x134>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000518:	4941      	ldr	r1, [pc, #260]	; (8000620 <getKeyInput+0x12c>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(i == 0){KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port,BUTTON1_Pin);}
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d10b      	bne.n	800053e <getKeyInput+0x4a>
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4840      	ldr	r0, [pc, #256]	; (800062c <getKeyInput+0x138>)
 800052c:	f001 faa0 	bl	8001a70 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	4619      	mov	r1, r3
 8000534:	4a3c      	ldr	r2, [pc, #240]	; (8000628 <getKeyInput+0x134>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800053c:	e01c      	b.n	8000578 <getKeyInput+0x84>
	else if(i == 1) {KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port,BUTTON2_Pin);}
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d10b      	bne.n	800055c <getKeyInput+0x68>
 8000544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000548:	4838      	ldr	r0, [pc, #224]	; (800062c <getKeyInput+0x138>)
 800054a:	f001 fa91 	bl	8001a70 <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	4619      	mov	r1, r3
 8000552:	4a35      	ldr	r2, [pc, #212]	; (8000628 <getKeyInput+0x134>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800055a:	e00d      	b.n	8000578 <getKeyInput+0x84>
	else if(i == 2) {KeyReg2[i]= HAL_GPIO_ReadPin(BUTTON3_GPIO_Port,BUTTON3_Pin);}
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b02      	cmp	r3, #2
 8000560:	d10a      	bne.n	8000578 <getKeyInput+0x84>
 8000562:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000566:	4831      	ldr	r0, [pc, #196]	; (800062c <getKeyInput+0x138>)
 8000568:	f001 fa82 	bl	8001a70 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	4619      	mov	r1, r3
 8000570:	4a2d      	ldr	r2, [pc, #180]	; (8000628 <getKeyInput+0x134>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000578:	4a2a      	ldr	r2, [pc, #168]	; (8000624 <getKeyInput+0x130>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000580:	4927      	ldr	r1, [pc, #156]	; (8000620 <getKeyInput+0x12c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000588:	429a      	cmp	r2, r3
 800058a:	d13d      	bne.n	8000608 <getKeyInput+0x114>
 800058c:	4a24      	ldr	r2, [pc, #144]	; (8000620 <getKeyInput+0x12c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000594:	4924      	ldr	r1, [pc, #144]	; (8000628 <getKeyInput+0x134>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800059c:	429a      	cmp	r2, r3
 800059e:	d133      	bne.n	8000608 <getKeyInput+0x114>
		if(KeyReg3[i] != KeyReg2[i]){
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <getKeyInput+0x13c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a8:	491f      	ldr	r1, [pc, #124]	; (8000628 <getKeyInput+0x134>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d014      	beq.n	80005de <getKeyInput+0xea>
			KeyReg3[i] = KeyReg2[i];
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <getKeyInput+0x134>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005bc:	491c      	ldr	r1, [pc, #112]	; (8000630 <getKeyInput+0x13c>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(KeyReg2[i] == PRESS_STATE){
 80005c4:	4a18      	ldr	r2, [pc, #96]	; (8000628 <getKeyInput+0x134>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d11b      	bne.n	8000608 <getKeyInput+0x114>
				subKeyProcess(i);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f7ff ff4b 	bl	800046c <subKeyProcess>
				TimeforKeyPress = 200;
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <getKeyInput+0x140>)
 80005d8:	22c8      	movs	r2, #200	; 0xc8
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	e014      	b.n	8000608 <getKeyInput+0x114>
			}
		}
		else {

			TimeforKeyPress--;
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <getKeyInput+0x140>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	3b01      	subs	r3, #1
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <getKeyInput+0x140>)
 80005e6:	6013      	str	r3, [r2, #0]
			if(TimeforKeyPress == 0){
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <getKeyInput+0x140>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d10b      	bne.n	8000608 <getKeyInput+0x114>
				if(KeyReg2[i] == PRESS_STATE){
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <getKeyInput+0x134>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <getKeyInput+0x10e>
					subKeyProcessLong(i);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ff57 	bl	80004b0 <subKeyProcessLong>
				}
				TimeforKeyPress = 200;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <getKeyInput+0x140>)
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	601a      	str	r2, [r3, #0]
	for (int i = 0 ;i < 3 ;i++){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3301      	adds	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b02      	cmp	r3, #2
 8000612:	f77f af75 	ble.w	8000500 <getKeyInput+0xc>
				//KeyReg3[i] = NORMAL_STATE;
			}
		}
	}
}
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000000c 	.word	0x2000000c
 8000624:	20000000 	.word	0x20000000
 8000628:	20000018 	.word	0x20000018
 800062c:	40011000 	.word	0x40011000
 8000630:	20000024 	.word	0x20000024
 8000634:	20000030 	.word	0x20000030

08000638 <isButton1Pressed>:
int isButton1Pressed(){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <isButton1Pressed+0x20>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d104      	bne.n	800064e <isButton1Pressed+0x16>
		button1_flag = 0;
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <isButton1Pressed+0x20>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
		return 1;
 800064a:	2301      	movs	r3, #1
 800064c:	e000      	b.n	8000650 <isButton1Pressed+0x18>
	}
	return 0;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	2000006c 	.word	0x2000006c

0800065c <isButton2Pressed>:
int isButton2Pressed(){
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <isButton2Pressed+0x20>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d104      	bne.n	8000672 <isButton2Pressed+0x16>
		button2_flag = 0;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <isButton2Pressed+0x20>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
		return 1;
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <isButton2Pressed+0x18>
	}
	return 0;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000070 	.word	0x20000070

08000680 <isButton3Pressed>:
int isButton3Pressed(){
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <isButton3Pressed+0x20>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d104      	bne.n	8000696 <isButton3Pressed+0x16>
		button3_flag = 0;
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <isButton3Pressed+0x20>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
		return 1;
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <isButton3Pressed+0x18>
	}
	return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20000074 	.word	0x20000074

080006a4 <fsm_automatic_run1>:
 */
#include "fsm_automatic.h"
#include "global.h"
int count1 = 0;
int count2 = 0;
void fsm_automatic_run1(){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	switch (status1){
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <fsm_automatic_run1+0x104>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d871      	bhi.n	8000796 <fsm_automatic_run1+0xf2>
 80006b2:	a201      	add	r2, pc, #4	; (adr r2, 80006b8 <fsm_automatic_run1+0x14>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006c9 	.word	0x080006c9
 80006bc:	080006d7 	.word	0x080006d7
 80006c0:	08000757 	.word	0x08000757
 80006c4:	08000717 	.word	0x08000717
		case INIT:
			status1 = AUTO_RED;
 80006c8:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <fsm_automatic_run1+0x104>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	601a      	str	r2, [r3, #0]
			setTimer1(1);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f000 fc02 	bl	8000ed8 <setTimer1>
			break;
 80006d4:	e066      	b.n	80007a4 <fsm_automatic_run1+0x100>
		case AUTO_RED:

			if(timer1_flag == 1){
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <fsm_automatic_run1+0x108>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d15d      	bne.n	800079a <fsm_automatic_run1+0xf6>
				status1 = AUTO_GREEN;
 80006de:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <fsm_automatic_run1+0x104>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	601a      	str	r2, [r3, #0]
				red1(1);green1(0);yellow1(0);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 f8fd 	bl	80008e4 <red1>
 80006ea:	2000      	movs	r0, #0
 80006ec:	f000 f914 	bl	8000918 <green1>
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 f92b 	bl	800094c <yellow1>
				count1 = set_red/100;
 80006f6:	4b2e      	ldr	r3, [pc, #184]	; (80007b0 <fsm_automatic_run1+0x10c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a2e      	ldr	r2, [pc, #184]	; (80007b4 <fsm_automatic_run1+0x110>)
 80006fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000700:	1152      	asrs	r2, r2, #5
 8000702:	17db      	asrs	r3, r3, #31
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	4a2c      	ldr	r2, [pc, #176]	; (80007b8 <fsm_automatic_run1+0x114>)
 8000708:	6013      	str	r3, [r2, #0]
				setTimer1(set_red);
 800070a:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <fsm_automatic_run1+0x10c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4618      	mov	r0, r3
 8000710:	f000 fbe2 	bl	8000ed8 <setTimer1>
			}
			break;
 8000714:	e041      	b.n	800079a <fsm_automatic_run1+0xf6>
		case AUTO_GREEN:

			if(timer1_flag == 1){
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <fsm_automatic_run1+0x108>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d13f      	bne.n	800079e <fsm_automatic_run1+0xfa>
				status1 = AUTO_YELLOW;
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <fsm_automatic_run1+0x104>)
 8000720:	2203      	movs	r2, #3
 8000722:	601a      	str	r2, [r3, #0]
				red1(0);green1(1);yellow1(0);
 8000724:	2000      	movs	r0, #0
 8000726:	f000 f8dd 	bl	80008e4 <red1>
 800072a:	2001      	movs	r0, #1
 800072c:	f000 f8f4 	bl	8000918 <green1>
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f90b 	bl	800094c <yellow1>
				count1 = set_green/100;
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <fsm_automatic_run1+0x118>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <fsm_automatic_run1+0x110>)
 800073c:	fb82 1203 	smull	r1, r2, r2, r3
 8000740:	1152      	asrs	r2, r2, #5
 8000742:	17db      	asrs	r3, r3, #31
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	4a1c      	ldr	r2, [pc, #112]	; (80007b8 <fsm_automatic_run1+0x114>)
 8000748:	6013      	str	r3, [r2, #0]
				setTimer1(set_green);
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <fsm_automatic_run1+0x118>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fbc2 	bl	8000ed8 <setTimer1>
			}

			break;
 8000754:	e023      	b.n	800079e <fsm_automatic_run1+0xfa>
		case AUTO_YELLOW:
			if(timer1_flag == 1){
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <fsm_automatic_run1+0x108>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d121      	bne.n	80007a2 <fsm_automatic_run1+0xfe>
				status1 = AUTO_RED;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <fsm_automatic_run1+0x104>)
 8000760:	2202      	movs	r2, #2
 8000762:	601a      	str	r2, [r3, #0]
				red1(0);green1(0);yellow1(1);
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f8bd 	bl	80008e4 <red1>
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f8d4 	bl	8000918 <green1>
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f8eb 	bl	800094c <yellow1>
				count1 = set_yellow/100;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <fsm_automatic_run1+0x11c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <fsm_automatic_run1+0x110>)
 800077c:	fb82 1203 	smull	r1, r2, r2, r3
 8000780:	1152      	asrs	r2, r2, #5
 8000782:	17db      	asrs	r3, r3, #31
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <fsm_automatic_run1+0x114>)
 8000788:	6013      	str	r3, [r2, #0]
				setTimer1(set_yellow);
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <fsm_automatic_run1+0x11c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fba2 	bl	8000ed8 <setTimer1>
			}

			break;
 8000794:	e005      	b.n	80007a2 <fsm_automatic_run1+0xfe>

		default:
			break;
 8000796:	bf00      	nop
 8000798:	e004      	b.n	80007a4 <fsm_automatic_run1+0x100>
			break;
 800079a:	bf00      	nop
 800079c:	e002      	b.n	80007a4 <fsm_automatic_run1+0x100>
			break;
 800079e:	bf00      	nop
 80007a0:	e000      	b.n	80007a4 <fsm_automatic_run1+0x100>
			break;
 80007a2:	bf00      	nop

	}
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000008c 	.word	0x2000008c
 80007ac:	200000c8 	.word	0x200000c8
 80007b0:	20000098 	.word	0x20000098
 80007b4:	51eb851f 	.word	0x51eb851f
 80007b8:	20000084 	.word	0x20000084
 80007bc:	2000009c 	.word	0x2000009c
 80007c0:	200000a0 	.word	0x200000a0

080007c4 <fsm_automatic_run2>:
void fsm_automatic_run2(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	switch (status2){
 80007c8:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <fsm_automatic_run2+0x104>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d871      	bhi.n	80008b6 <fsm_automatic_run2+0xf2>
 80007d2:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <fsm_automatic_run2+0x14>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	080007e9 	.word	0x080007e9
 80007dc:	080007f7 	.word	0x080007f7
 80007e0:	08000877 	.word	0x08000877
 80007e4:	08000837 	.word	0x08000837
		case INIT:
			status2 = AUTO_GREEN;
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <fsm_automatic_run2+0x104>)
 80007ea:	2204      	movs	r2, #4
 80007ec:	601a      	str	r2, [r3, #0]
			setTimer4(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f000 fbae 	bl	8000f50 <setTimer4>
			break;
 80007f4:	e066      	b.n	80008c4 <fsm_automatic_run2+0x100>
		case AUTO_RED:

			if(timer4_flag == 1){
 80007f6:	4b35      	ldr	r3, [pc, #212]	; (80008cc <fsm_automatic_run2+0x108>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b01      	cmp	r3, #1
 80007fc:	d15d      	bne.n	80008ba <fsm_automatic_run2+0xf6>
				status2 = AUTO_GREEN;
 80007fe:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <fsm_automatic_run2+0x104>)
 8000800:	2204      	movs	r2, #4
 8000802:	601a      	str	r2, [r3, #0]
				red2(1);green2(0);yellow2(0);
 8000804:	2001      	movs	r0, #1
 8000806:	f000 f8bb 	bl	8000980 <red2>
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f8d2 	bl	80009b4 <green2>
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f8e9 	bl	80009e8 <yellow2>
				count2 = set_red/100;
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <fsm_automatic_run2+0x10c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <fsm_automatic_run2+0x110>)
 800081c:	fb82 1203 	smull	r1, r2, r2, r3
 8000820:	1152      	asrs	r2, r2, #5
 8000822:	17db      	asrs	r3, r3, #31
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	4a2c      	ldr	r2, [pc, #176]	; (80008d8 <fsm_automatic_run2+0x114>)
 8000828:	6013      	str	r3, [r2, #0]
				setTimer4(set_red);
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <fsm_automatic_run2+0x10c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fb8e 	bl	8000f50 <setTimer4>
			}

			break;
 8000834:	e041      	b.n	80008ba <fsm_automatic_run2+0xf6>
		case AUTO_GREEN:

			if(timer4_flag == 1){
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <fsm_automatic_run2+0x108>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d13f      	bne.n	80008be <fsm_automatic_run2+0xfa>
				status2 = AUTO_YELLOW;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <fsm_automatic_run2+0x104>)
 8000840:	2203      	movs	r2, #3
 8000842:	601a      	str	r2, [r3, #0]
				red2(0);green2(1);yellow2(0);
 8000844:	2000      	movs	r0, #0
 8000846:	f000 f89b 	bl	8000980 <red2>
 800084a:	2001      	movs	r0, #1
 800084c:	f000 f8b2 	bl	80009b4 <green2>
 8000850:	2000      	movs	r0, #0
 8000852:	f000 f8c9 	bl	80009e8 <yellow2>
				count2 = set_green/100;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <fsm_automatic_run2+0x118>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <fsm_automatic_run2+0x110>)
 800085c:	fb82 1203 	smull	r1, r2, r2, r3
 8000860:	1152      	asrs	r2, r2, #5
 8000862:	17db      	asrs	r3, r3, #31
 8000864:	1ad3      	subs	r3, r2, r3
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <fsm_automatic_run2+0x114>)
 8000868:	6013      	str	r3, [r2, #0]
				setTimer4(set_green);
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <fsm_automatic_run2+0x118>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fb6e 	bl	8000f50 <setTimer4>
			}

			break;
 8000874:	e023      	b.n	80008be <fsm_automatic_run2+0xfa>
		case AUTO_YELLOW:
			if(timer4_flag == 1){
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <fsm_automatic_run2+0x108>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d121      	bne.n	80008c2 <fsm_automatic_run2+0xfe>
				status2 = AUTO_RED;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <fsm_automatic_run2+0x104>)
 8000880:	2202      	movs	r2, #2
 8000882:	601a      	str	r2, [r3, #0]
				red2(0);green2(0);yellow2(1);
 8000884:	2000      	movs	r0, #0
 8000886:	f000 f87b 	bl	8000980 <red2>
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f892 	bl	80009b4 <green2>
 8000890:	2001      	movs	r0, #1
 8000892:	f000 f8a9 	bl	80009e8 <yellow2>
				count2 = set_yellow/100;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <fsm_automatic_run2+0x11c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <fsm_automatic_run2+0x110>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1152      	asrs	r2, r2, #5
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <fsm_automatic_run2+0x114>)
 80008a8:	6013      	str	r3, [r2, #0]
				setTimer4(set_yellow);
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <fsm_automatic_run2+0x11c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 fb4e 	bl	8000f50 <setTimer4>
			}

			break;
 80008b4:	e005      	b.n	80008c2 <fsm_automatic_run2+0xfe>

		default:
			break;
 80008b6:	bf00      	nop
 80008b8:	e004      	b.n	80008c4 <fsm_automatic_run2+0x100>
			break;
 80008ba:	bf00      	nop
 80008bc:	e002      	b.n	80008c4 <fsm_automatic_run2+0x100>
			break;
 80008be:	bf00      	nop
 80008c0:	e000      	b.n	80008c4 <fsm_automatic_run2+0x100>
			break;
 80008c2:	bf00      	nop

	}
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000090 	.word	0x20000090
 80008cc:	200000d4 	.word	0x200000d4
 80008d0:	20000098 	.word	0x20000098
 80008d4:	51eb851f 	.word	0x51eb851f
 80008d8:	20000088 	.word	0x20000088
 80008dc:	2000009c 	.word	0x2000009c
 80008e0:	200000a0 	.word	0x200000a0

080008e4 <red1>:
 *      Author: ASUS
 */


#include "ledStatus.h"
void red1(int status){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	if(status == 1)	HAL_GPIO_WritePin(GPIOA,LED_RED1_Pin,RESET);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d104      	bne.n	80008fc <red1+0x18>
 80008f2:	2200      	movs	r2, #0
 80008f4:	2104      	movs	r1, #4
 80008f6:	4807      	ldr	r0, [pc, #28]	; (8000914 <red1+0x30>)
 80008f8:	f001 f8d1 	bl	8001a9e <HAL_GPIO_WritePin>
	if(status == 0)	HAL_GPIO_WritePin(GPIOA,LED_RED1_Pin,SET);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d104      	bne.n	800090c <red1+0x28>
 8000902:	2201      	movs	r2, #1
 8000904:	2104      	movs	r1, #4
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <red1+0x30>)
 8000908:	f001 f8c9 	bl	8001a9e <HAL_GPIO_WritePin>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40010800 	.word	0x40010800

08000918 <green1>:
void green1(int status){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	if(status == 1)	HAL_GPIO_WritePin(GPIOA,LED_GREEN1_Pin,RESET);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d104      	bne.n	8000930 <green1+0x18>
 8000926:	2200      	movs	r2, #0
 8000928:	2110      	movs	r1, #16
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <green1+0x30>)
 800092c:	f001 f8b7 	bl	8001a9e <HAL_GPIO_WritePin>
	if(status == 0)	HAL_GPIO_WritePin(GPIOA,LED_GREEN1_Pin,SET);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d104      	bne.n	8000940 <green1+0x28>
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <green1+0x30>)
 800093c:	f001 f8af 	bl	8001a9e <HAL_GPIO_WritePin>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40010800 	.word	0x40010800

0800094c <yellow1>:
void yellow1(int status){
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	if(status == 1)	HAL_GPIO_WritePin(GPIOA,LED_YELLOW1_Pin,RESET);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d104      	bne.n	8000964 <yellow1+0x18>
 800095a:	2200      	movs	r2, #0
 800095c:	2108      	movs	r1, #8
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <yellow1+0x30>)
 8000960:	f001 f89d 	bl	8001a9e <HAL_GPIO_WritePin>
	if(status == 0)	HAL_GPIO_WritePin(GPIOA,LED_YELLOW1_Pin,SET);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d104      	bne.n	8000974 <yellow1+0x28>
 800096a:	2201      	movs	r2, #1
 800096c:	2108      	movs	r1, #8
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <yellow1+0x30>)
 8000970:	f001 f895 	bl	8001a9e <HAL_GPIO_WritePin>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40010800 	.word	0x40010800

08000980 <red2>:
void red2(int status){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	if(status == 1)	HAL_GPIO_WritePin(GPIOA,LED_RED2_Pin,RESET);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d104      	bne.n	8000998 <red2+0x18>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <red2+0x30>)
 8000994:	f001 f883 	bl	8001a9e <HAL_GPIO_WritePin>
	if(status == 0)	HAL_GPIO_WritePin(GPIOA,LED_RED2_Pin,SET);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <red2+0x28>
 800099e:	2201      	movs	r2, #1
 80009a0:	2120      	movs	r1, #32
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <red2+0x30>)
 80009a4:	f001 f87b 	bl	8001a9e <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40010800 	.word	0x40010800

080009b4 <green2>:
void green2(int status){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	if(status == 1)	HAL_GPIO_WritePin(GPIOA,LED_GREEN2_Pin,RESET);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d104      	bne.n	80009cc <green2+0x18>
 80009c2:	2200      	movs	r2, #0
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <green2+0x30>)
 80009c8:	f001 f869 	bl	8001a9e <HAL_GPIO_WritePin>
	if(status == 0)	HAL_GPIO_WritePin(GPIOA,LED_GREEN2_Pin,SET);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d104      	bne.n	80009dc <green2+0x28>
 80009d2:	2201      	movs	r2, #1
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <green2+0x30>)
 80009d8:	f001 f861 	bl	8001a9e <HAL_GPIO_WritePin>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40010800 	.word	0x40010800

080009e8 <yellow2>:
void yellow2(int status){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if(status == 1)	HAL_GPIO_WritePin(GPIOA,LED_YELLOW2_Pin,RESET);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d104      	bne.n	8000a00 <yellow2+0x18>
 80009f6:	2200      	movs	r2, #0
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <yellow2+0x30>)
 80009fc:	f001 f84f 	bl	8001a9e <HAL_GPIO_WritePin>
	if(status == 0)	HAL_GPIO_WritePin(GPIOA,LED_YELLOW2_Pin,SET);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <yellow2+0x28>
 8000a06:	2201      	movs	r2, #1
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4803      	ldr	r0, [pc, #12]	; (8000a18 <yellow2+0x30>)
 8000a0c:	f001 f847 	bl	8001a9e <HAL_GPIO_WritePin>
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40010800 	.word	0x40010800

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fd3b 	bl	800149c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f857 	bl	8000ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f000 f8dd 	bl	8000be8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a2e:	f000 f88f 	bl	8000b50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a32:	4824      	ldr	r0, [pc, #144]	; (8000ac4 <main+0xa8>)
 8000a34:	f001 fc9c 	bl	8002370 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status1 = INIT;
 8000a38:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <main+0xac>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <main+0xb0>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	601a      	str	r2, [r3, #0]

  setTimer1(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f000 fa47 	bl	8000ed8 <setTimer1>
  setTimer2(100);
 8000a4a:	2064      	movs	r0, #100	; 0x64
 8000a4c:	f000 fa58 	bl	8000f00 <setTimer2>
  setTimer3(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f000 fa69 	bl	8000f28 <setTimer3>
  setTimer4(100);
 8000a56:	2064      	movs	r0, #100	; 0x64
 8000a58:	f000 fa7a 	bl	8000f50 <setTimer4>
  setTimer5(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f000 fa8b 	bl	8000f78 <setTimer5>
//  int time_yellow = 0;
 // int time_green = 0;
	  red2(0);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff ff8c 	bl	8000980 <red2>
	  green2(0);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ffa3 	bl	80009b4 <green2>
	  yellow2(0);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff ffba 	bl	80009e8 <yellow2>
	  red1(0);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ff35 	bl	80008e4 <red1>
	 green1(0);
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff ff4c 	bl	8000918 <green1>
		yellow1(0);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff ff63 	bl	800094c <yellow1>
	int	index_led = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(timer5_flag == 1){
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <main+0xb4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d114      	bne.n	8000abc <main+0xa0>
	  	if ( index_led > 3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	dd01      	ble.n	8000a9c <main+0x80>
	  	index_led = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
		display7_seg(led_buffer[index_led]);
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <main+0xb8>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fb51 	bl	800014c <display7_seg>
	  	scan7SEG(index_led++) ;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	1c5a      	adds	r2, r3, #1
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f9c3 	bl	8000e3c <scan7SEG>
	  	setTimer5(10) ;
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f000 fa5e 	bl	8000f78 <setTimer5>
	  }

	  traffic_run();
 8000abc:	f000 fb68 	bl	8001190 <traffic_run>
	  if(timer5_flag == 1){
 8000ac0:	e7e3      	b.n	8000a8a <main+0x6e>
 8000ac2:	bf00      	nop
 8000ac4:	200000dc 	.word	0x200000dc
 8000ac8:	2000008c 	.word	0x2000008c
 8000acc:	20000090 	.word	0x20000090
 8000ad0:	200000d8 	.word	0x200000d8
 8000ad4:	20000034 	.word	0x20000034

08000ad8 <SystemClock_Config>:
  * @retval None
  */
  }
}
void SystemClock_Config(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b090      	sub	sp, #64	; 0x40
 8000adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	2228      	movs	r2, #40	; 0x28
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 fffa 	bl	8002ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afe:	2301      	movs	r3, #1
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b02:	2310      	movs	r3, #16
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0a:	f107 0318 	add.w	r3, r7, #24
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fff6 	bl	8001b00 <HAL_RCC_OscConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f8e1 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fa62 	bl	8002000 <HAL_RCC_ClockConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b42:	f000 f8cd 	bl	8000ce0 <Error_Handler>
  }
}
 8000b46:	bf00      	nop
 8000b48:	3740      	adds	r7, #64	; 0x40
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b64:	463b      	mov	r3, r7
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b84:	2209      	movs	r2, #9
 8000b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000b96:	f001 fb9b 	bl	80022d0 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ba0:	f000 f89e 	bl	8000ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000bb2:	f001 fd31 	bl	8002618 <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bbc:	f000 f890 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_TIM2_Init+0x94>)
 8000bce:	f001 fef9 	bl	80029c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 f882 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200000dc 	.word	0x200000dc

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a2d      	ldr	r2, [pc, #180]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a21      	ldr	r2, [pc, #132]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0xd0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000c44:	2200      	movs	r2, #0
 8000c46:	f24f 01fc 	movw	r1, #61692	; 0xf0fc
 8000c4a:	481c      	ldr	r0, [pc, #112]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c4c:	f000 ff27 	bl	8001a9e <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_7SEG_Pin|b_7SEG_Pin|c_7SEG_Pin|d_7SEG_Pin
 8000c50:	2200      	movs	r2, #0
 8000c52:	217f      	movs	r1, #127	; 0x7f
 8000c54:	481a      	ldr	r0, [pc, #104]	; (8000cc0 <MX_GPIO_Init+0xd8>)
 8000c56:	f000 ff22 	bl	8001a9e <HAL_GPIO_WritePin>
                          |e_7SEG_Pin|f_7SEG_Pin|g_7SEG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000c5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0xdc>)
 8000c70:	f000 fd84 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin EN1_Pin EN2_Pin
                           EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000c74:	f24f 03fc 	movw	r3, #61692	; 0xf0fc
 8000c78:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <MX_GPIO_Init+0xd4>)
 8000c8e:	f000 fd75 	bl	800177c <HAL_GPIO_Init>

  /*Configure GPIO pins : a_7SEG_Pin b_7SEG_Pin c_7SEG_Pin d_7SEG_Pin
                           e_7SEG_Pin f_7SEG_Pin g_7SEG_Pin */
  GPIO_InitStruct.Pin = a_7SEG_Pin|b_7SEG_Pin|c_7SEG_Pin|d_7SEG_Pin
 8000c92:	237f      	movs	r3, #127	; 0x7f
 8000c94:	613b      	str	r3, [r7, #16]
                          |e_7SEG_Pin|f_7SEG_Pin|g_7SEG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_GPIO_Init+0xd8>)
 8000caa:	f000 fd67 	bl	800177c <HAL_GPIO_Init>

}
 8000cae:	bf00      	nop
 8000cb0:	3720      	adds	r7, #32
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800
 8000cc0:	40010c00 	.word	0x40010c00
 8000cc4:	40011000 	.word	0x40011000

08000cc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	timerRun();
 8000cd0:	f000 f966 	bl	8000fa0 <timerRun>
	getKeyInput();
 8000cd4:	f7ff fc0e 	bl	80004f4 <getKeyInput>
	//getKeyInput();
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <process_red>:
 int set_yellow = 0;
 int flag_red = 0;
 int flag_yellow = 0;
 int flag_green = 0;
 int led_set = 0;
void process_red(){
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	if(isButton2Pressed()==1){
 8000cf0:	f7ff fcb4 	bl	800065c <isButton2Pressed>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d109      	bne.n	8000d0e <process_red+0x22>
		set_red += 100;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <process_red+0x5c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3364      	adds	r3, #100	; 0x64
 8000d00:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <process_red+0x5c>)
 8000d02:	6013      	str	r3, [r2, #0]
		led_set++;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <process_red+0x60>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <process_red+0x60>)
 8000d0c:	6013      	str	r3, [r2, #0]
	}
	if(isButton3Pressed()==1){
 8000d0e:	f7ff fcb7 	bl	8000680 <isButton3Pressed>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d105      	bne.n	8000d24 <process_red+0x38>
		flag_red = 1;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <process_red+0x64>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
		led_set = 0;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <process_red+0x60>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
	}
	if(timer3_flag == 1){
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <process_red+0x68>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d10a      	bne.n	8000d42 <process_red+0x56>

	HAL_GPIO_TogglePin(GPIOA, LED_RED1_Pin);
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	480a      	ldr	r0, [pc, #40]	; (8000d58 <process_red+0x6c>)
 8000d30:	f000 fecd 	bl	8001ace <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, LED_RED2_Pin);
 8000d34:	2120      	movs	r1, #32
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <process_red+0x6c>)
 8000d38:	f000 fec9 	bl	8001ace <HAL_GPIO_TogglePin>
	setTimer3(50);}
 8000d3c:	2032      	movs	r0, #50	; 0x32
 8000d3e:	f000 f8f3 	bl	8000f28 <setTimer3>
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000098 	.word	0x20000098
 8000d4c:	200000b0 	.word	0x200000b0
 8000d50:	200000a4 	.word	0x200000a4
 8000d54:	200000d0 	.word	0x200000d0
 8000d58:	40010800 	.word	0x40010800

08000d5c <process_green>:
void process_green(){
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	if(isButton2Pressed()==1){
 8000d60:	f7ff fc7c 	bl	800065c <isButton2Pressed>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d109      	bne.n	8000d7e <process_green+0x22>
		set_green += 100;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <process_green+0x5c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3364      	adds	r3, #100	; 0x64
 8000d70:	4a11      	ldr	r2, [pc, #68]	; (8000db8 <process_green+0x5c>)
 8000d72:	6013      	str	r3, [r2, #0]

		led_set++;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <process_green+0x60>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <process_green+0x60>)
 8000d7c:	6013      	str	r3, [r2, #0]
	}
	if(isButton3Pressed()==1){
 8000d7e:	f7ff fc7f 	bl	8000680 <isButton3Pressed>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d105      	bne.n	8000d94 <process_green+0x38>
		flag_green = 1;
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <process_green+0x64>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
		led_set = 0;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <process_green+0x60>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

	}
	if(timer3_flag == 1){
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <process_green+0x68>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d10a      	bne.n	8000db2 <process_green+0x56>

	HAL_GPIO_TogglePin(GPIOA, LED_GREEN1_Pin);
 8000d9c:	2110      	movs	r1, #16
 8000d9e:	480a      	ldr	r0, [pc, #40]	; (8000dc8 <process_green+0x6c>)
 8000da0:	f000 fe95 	bl	8001ace <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN2_Pin);
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <process_green+0x6c>)
 8000da8:	f000 fe91 	bl	8001ace <HAL_GPIO_TogglePin>

	setTimer3(50);}
 8000dac:	2032      	movs	r0, #50	; 0x32
 8000dae:	f000 f8bb 	bl	8000f28 <setTimer3>

}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	200000b0 	.word	0x200000b0
 8000dc0:	200000ac 	.word	0x200000ac
 8000dc4:	200000d0 	.word	0x200000d0
 8000dc8:	40010800 	.word	0x40010800

08000dcc <process_yellow>:
void process_yellow(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if(isButton2Pressed()==1){
 8000dd0:	f7ff fc44 	bl	800065c <isButton2Pressed>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d109      	bne.n	8000dee <process_yellow+0x22>
		set_yellow += 100;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <process_yellow+0x5c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3364      	adds	r3, #100	; 0x64
 8000de0:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <process_yellow+0x5c>)
 8000de2:	6013      	str	r3, [r2, #0]

		led_set++;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <process_yellow+0x60>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a10      	ldr	r2, [pc, #64]	; (8000e2c <process_yellow+0x60>)
 8000dec:	6013      	str	r3, [r2, #0]

	}
	if(isButton3Pressed()==1){
 8000dee:	f7ff fc47 	bl	8000680 <isButton3Pressed>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d105      	bne.n	8000e04 <process_yellow+0x38>
		flag_yellow = 1;
 8000df8:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <process_yellow+0x64>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
		led_set = 0;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <process_yellow+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]

	}
	if(timer3_flag == 1){
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <process_yellow+0x68>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d10a      	bne.n	8000e22 <process_yellow+0x56>
	HAL_GPIO_TogglePin(GPIOA, LED_YELLOW1_Pin);
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	480a      	ldr	r0, [pc, #40]	; (8000e38 <process_yellow+0x6c>)
 8000e10:	f000 fe5d 	bl	8001ace <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOA, LED_YELLOW2_Pin);
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <process_yellow+0x6c>)
 8000e18:	f000 fe59 	bl	8001ace <HAL_GPIO_TogglePin>
	setTimer3(50);}
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f000 f883 	bl	8000f28 <setTimer3>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000a0 	.word	0x200000a0
 8000e2c:	200000b0 	.word	0x200000b0
 8000e30:	200000a8 	.word	0x200000a8
 8000e34:	200000d0 	.word	0x200000d0
 8000e38:	40010800 	.word	0x40010800

08000e3c <scan7SEG>:


#include "scanLed.h"
//int index_led = 0;
int led_buffer[4]  ={1,2,3,4};
	void scan7SEG ( int index ){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(GPIOA, EN1_Pin, SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4a:	4822      	ldr	r0, [pc, #136]	; (8000ed4 <scan7SEG+0x98>)
 8000e4c:	f000 fe27 	bl	8001a9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2_Pin, SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e56:	481f      	ldr	r0, [pc, #124]	; (8000ed4 <scan7SEG+0x98>)
 8000e58:	f000 fe21 	bl	8001a9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3_Pin, SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <scan7SEG+0x98>)
 8000e64:	f000 fe1b 	bl	8001a9e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN4_Pin, SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6e:	4819      	ldr	r0, [pc, #100]	; (8000ed4 <scan7SEG+0x98>)
 8000e70:	f000 fe15 	bl	8001a9e <HAL_GPIO_WritePin>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d826      	bhi.n	8000ec8 <scan7SEG+0x8c>
 8000e7a:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <scan7SEG+0x44>)
 8000e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000e9f 	.word	0x08000e9f
 8000e88:	08000ead 	.word	0x08000ead
 8000e8c:	08000ebb 	.word	0x08000ebb

			switch ( index){
				case 0:
					HAL_GPIO_WritePin(GPIOA, EN1_Pin, RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <scan7SEG+0x98>)
 8000e98:	f000 fe01 	bl	8001a9e <HAL_GPIO_WritePin>
					// Display the first 7 SEG with led_buffer [0]
					break ;
 8000e9c:	e015      	b.n	8000eca <scan7SEG+0x8e>
				case 1:
					HAL_GPIO_WritePin(GPIOA, EN2_Pin, RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea4:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <scan7SEG+0x98>)
 8000ea6:	f000 fdfa 	bl	8001a9e <HAL_GPIO_WritePin>
					// Display the second 7 SEG with led_buffer [1]
					break ;
 8000eaa:	e00e      	b.n	8000eca <scan7SEG+0x8e>
				case 2:
					HAL_GPIO_WritePin(GPIOA, EN3_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb2:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <scan7SEG+0x98>)
 8000eb4:	f000 fdf3 	bl	8001a9e <HAL_GPIO_WritePin>
					// Display the third 7 SEG with led_buffer [2]
					break ;
 8000eb8:	e007      	b.n	8000eca <scan7SEG+0x8e>
				case 3:
					HAL_GPIO_WritePin(GPIOA, EN4_Pin, RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <scan7SEG+0x98>)
 8000ec2:	f000 fdec 	bl	8001a9e <HAL_GPIO_WritePin>
					// Display the forth 7 SEG with led_buffer [3]
					break ;
 8000ec6:	e000      	b.n	8000eca <scan7SEG+0x8e>
				default :
					break ;
 8000ec8:	bf00      	nop
			}
 }
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40010800 	.word	0x40010800

08000ed8 <setTimer1>:
int timer2_flag  = 0;
int timer3_flag  = 0;
int timer4_flag  = 0;
int timer5_flag  = 0;

void setTimer1(int duration){
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <setTimer1+0x20>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <setTimer1+0x24>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200000b4 	.word	0x200000b4
 8000efc:	200000c8 	.word	0x200000c8

08000f00 <setTimer2>:
void setTimer2(int duration){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000f08:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <setTimer2+0x20>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <setTimer2+0x24>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000b8 	.word	0x200000b8
 8000f24:	200000cc 	.word	0x200000cc

08000f28 <setTimer3>:
void setTimer3(int duration){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <setTimer3+0x20>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <setTimer3+0x24>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200000bc 	.word	0x200000bc
 8000f4c:	200000d0 	.word	0x200000d0

08000f50 <setTimer4>:
void setTimer4(int duration){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <setTimer4+0x20>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <setTimer4+0x24>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	200000c0 	.word	0x200000c0
 8000f74:	200000d4 	.word	0x200000d4

08000f78 <setTimer5>:
void setTimer5(int duration){
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <setTimer5+0x20>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <setTimer5+0x24>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200000c4 	.word	0x200000c4
 8000f9c:	200000d8 	.word	0x200000d8

08000fa0 <timerRun>:
void timerRun(){
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <timerRun+0xac>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dd0b      	ble.n	8000fc4 <timerRun+0x24>
		timer1_counter--;
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <timerRun+0xac>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	4a26      	ldr	r2, [pc, #152]	; (800104c <timerRun+0xac>)
 8000fb4:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <timerRun+0xac>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	dc02      	bgt.n	8000fc4 <timerRun+0x24>
			timer1_flag = 1;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	; (8001050 <timerRun+0xb0>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
		}
	}
	 if(timer2_counter > 0){
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <timerRun+0xb4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	dd0b      	ble.n	8000fe4 <timerRun+0x44>
		timer2_counter--;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	; (8001054 <timerRun+0xb4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	4a20      	ldr	r2, [pc, #128]	; (8001054 <timerRun+0xb4>)
 8000fd4:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <timerRun+0xb4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	dc02      	bgt.n	8000fe4 <timerRun+0x44>
			timer2_flag = 1;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <timerRun+0xb8>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
		}
	}
	 if(timer3_counter > 0){
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <timerRun+0xbc>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dd0b      	ble.n	8001004 <timerRun+0x64>
		timer3_counter--;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <timerRun+0xbc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	4a1a      	ldr	r2, [pc, #104]	; (800105c <timerRun+0xbc>)
 8000ff4:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <timerRun+0xbc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dc02      	bgt.n	8001004 <timerRun+0x64>
			timer3_flag = 1;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <timerRun+0xc0>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
		}
	}
	 if(timer4_counter > 0){
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <timerRun+0xc4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd0b      	ble.n	8001024 <timerRun+0x84>
		timer4_counter--;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <timerRun+0xc4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	3b01      	subs	r3, #1
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <timerRun+0xc4>)
 8001014:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <timerRun+0xc4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	dc02      	bgt.n	8001024 <timerRun+0x84>
			timer4_flag = 1;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <timerRun+0xc8>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]
		}
	}
	 if(timer5_counter > 0){
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <timerRun+0xcc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	dd0b      	ble.n	8001044 <timerRun+0xa4>
			timer5_counter--;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <timerRun+0xcc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3b01      	subs	r3, #1
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <timerRun+0xcc>)
 8001034:	6013      	str	r3, [r2, #0]
			if(timer5_counter <= 0){
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <timerRun+0xcc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dc02      	bgt.n	8001044 <timerRun+0xa4>
				timer5_flag = 1;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <timerRun+0xd0>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
			}
		}

}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	200000b4 	.word	0x200000b4
 8001050:	200000c8 	.word	0x200000c8
 8001054:	200000b8 	.word	0x200000b8
 8001058:	200000cc 	.word	0x200000cc
 800105c:	200000bc 	.word	0x200000bc
 8001060:	200000d0 	.word	0x200000d0
 8001064:	200000c0 	.word	0x200000c0
 8001068:	200000d4 	.word	0x200000d4
 800106c:	200000c4 	.word	0x200000c4
 8001070:	200000d8 	.word	0x200000d8

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d113      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	201c      	movs	r0, #28
 8001108:	f000 fb01 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800110c:	201c      	movs	r0, #28
 800110e:	f000 fb1a 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f9df 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM2_IRQHandler+0x10>)
 8001176:	f001 f947 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000dc 	.word	0x200000dc

08001184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <traffic_run>:
 */


#include "traffic.h"
#include "fsm_automatic.h"
void traffic_run(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	  if(isButton1Pressed()==1){
 8001194:	f7ff fa50 	bl	8000638 <isButton1Pressed>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d104      	bne.n	80011a8 <traffic_run+0x18>
		  mode++;
 800119e:	4b9e      	ldr	r3, [pc, #632]	; (8001418 <traffic_run+0x288>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a9c      	ldr	r2, [pc, #624]	; (8001418 <traffic_run+0x288>)
 80011a6:	6013      	str	r3, [r2, #0]
	  }
	  if(mode > 4)mode = 0;
 80011a8:	4b9b      	ldr	r3, [pc, #620]	; (8001418 <traffic_run+0x288>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	dd02      	ble.n	80011b6 <traffic_run+0x26>
 80011b0:	4b99      	ldr	r3, [pc, #612]	; (8001418 <traffic_run+0x288>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
	switch (mode){
 80011b6:	4b98      	ldr	r3, [pc, #608]	; (8001418 <traffic_run+0x288>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	f200 8127 	bhi.w	800140e <traffic_run+0x27e>
 80011c0:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <traffic_run+0x38>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	080011dd 	.word	0x080011dd
 80011cc:	0800120b 	.word	0x0800120b
 80011d0:	080012b9 	.word	0x080012b9
 80011d4:	0800139d 	.word	0x0800139d
 80011d8:	0800132b 	.word	0x0800132b
		  case 0:
			  yellow1(0);yellow2(0);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fbb5 	bl	800094c <yellow1>
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fc00 	bl	80009e8 <yellow2>
			  green1(0);green2(0);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fb95 	bl	8000918 <green1>
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fbe0 	bl	80009b4 <green2>
			  red1(0);red2(0);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff fb75 	bl	80008e4 <red1>
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fbc0 	bl	8000980 <red2>
			  led_buffer[2] = mode;
 8001200:	4b85      	ldr	r3, [pc, #532]	; (8001418 <traffic_run+0x288>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a85      	ldr	r2, [pc, #532]	; (800141c <traffic_run+0x28c>)
 8001206:	6093      	str	r3, [r2, #8]
			  break;
 8001208:	e104      	b.n	8001414 <traffic_run+0x284>
		  case 1:
			  if(flag_yellow == 1 && flag_green == 1 && flag_red == 1){
 800120a:	4b85      	ldr	r3, [pc, #532]	; (8001420 <traffic_run+0x290>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	f040 80ff 	bne.w	8001412 <traffic_run+0x282>
 8001214:	4b83      	ldr	r3, [pc, #524]	; (8001424 <traffic_run+0x294>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	f040 80fa 	bne.w	8001412 <traffic_run+0x282>
 800121e:	4b82      	ldr	r3, [pc, #520]	; (8001428 <traffic_run+0x298>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	f040 80f5 	bne.w	8001412 <traffic_run+0x282>
				  if(timer2_flag == 1){
 8001228:	4b80      	ldr	r3, [pc, #512]	; (800142c <traffic_run+0x29c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10c      	bne.n	800124a <traffic_run+0xba>
					  count1--;
 8001230:	4b7f      	ldr	r3, [pc, #508]	; (8001430 <traffic_run+0x2a0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3b01      	subs	r3, #1
 8001236:	4a7e      	ldr	r2, [pc, #504]	; (8001430 <traffic_run+0x2a0>)
 8001238:	6013      	str	r3, [r2, #0]
					  count2--;
 800123a:	4b7e      	ldr	r3, [pc, #504]	; (8001434 <traffic_run+0x2a4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3b01      	subs	r3, #1
 8001240:	4a7c      	ldr	r2, [pc, #496]	; (8001434 <traffic_run+0x2a4>)
 8001242:	6013      	str	r3, [r2, #0]
					  setTimer2(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f7ff fe5b 	bl	8000f00 <setTimer2>

				  }
				  led_buffer[0] = count1%10;
 800124a:	4b79      	ldr	r3, [pc, #484]	; (8001430 <traffic_run+0x2a0>)
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	4b7a      	ldr	r3, [pc, #488]	; (8001438 <traffic_run+0x2a8>)
 8001250:	fb83 2301 	smull	r2, r3, r3, r1
 8001254:	109a      	asrs	r2, r3, #2
 8001256:	17cb      	asrs	r3, r1, #31
 8001258:	1ad2      	subs	r2, r2, r3
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	1aca      	subs	r2, r1, r3
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <traffic_run+0x28c>)
 8001266:	601a      	str	r2, [r3, #0]
				  led_buffer[1] = count1/10;
 8001268:	4b71      	ldr	r3, [pc, #452]	; (8001430 <traffic_run+0x2a0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a72      	ldr	r2, [pc, #456]	; (8001438 <traffic_run+0x2a8>)
 800126e:	fb82 1203 	smull	r1, r2, r2, r3
 8001272:	1092      	asrs	r2, r2, #2
 8001274:	17db      	asrs	r3, r3, #31
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	4a68      	ldr	r2, [pc, #416]	; (800141c <traffic_run+0x28c>)
 800127a:	6053      	str	r3, [r2, #4]
				  led_buffer[2] = count2%10;
 800127c:	4b6d      	ldr	r3, [pc, #436]	; (8001434 <traffic_run+0x2a4>)
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <traffic_run+0x2a8>)
 8001282:	fb83 2301 	smull	r2, r3, r3, r1
 8001286:	109a      	asrs	r2, r3, #2
 8001288:	17cb      	asrs	r3, r1, #31
 800128a:	1ad2      	subs	r2, r2, r3
 800128c:	4613      	mov	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	1aca      	subs	r2, r1, r3
 8001296:	4b61      	ldr	r3, [pc, #388]	; (800141c <traffic_run+0x28c>)
 8001298:	609a      	str	r2, [r3, #8]
				  led_buffer[3] = count2/10;
 800129a:	4b66      	ldr	r3, [pc, #408]	; (8001434 <traffic_run+0x2a4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a66      	ldr	r2, [pc, #408]	; (8001438 <traffic_run+0x2a8>)
 80012a0:	fb82 1203 	smull	r1, r2, r2, r3
 80012a4:	1092      	asrs	r2, r2, #2
 80012a6:	17db      	asrs	r3, r3, #31
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	4a5c      	ldr	r2, [pc, #368]	; (800141c <traffic_run+0x28c>)
 80012ac:	60d3      	str	r3, [r2, #12]
			  	  fsm_automatic_run1();
 80012ae:	f7ff f9f9 	bl	80006a4 <fsm_automatic_run1>
			  	  fsm_automatic_run2();
 80012b2:	f7ff fa87 	bl	80007c4 <fsm_automatic_run2>

			  }

			  break;
 80012b6:	e0ac      	b.n	8001412 <traffic_run+0x282>
		  case 2:
			  yellow1(0);yellow2(0);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fb47 	bl	800094c <yellow1>
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff fb92 	bl	80009e8 <yellow2>
			  green1(0);green2(0);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fb27 	bl	8000918 <green1>
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fb72 	bl	80009b4 <green2>
			  led_set = set_red/100;
 80012d0:	4b5a      	ldr	r3, [pc, #360]	; (800143c <traffic_run+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a5a      	ldr	r2, [pc, #360]	; (8001440 <traffic_run+0x2b0>)
 80012d6:	fb82 1203 	smull	r1, r2, r2, r3
 80012da:	1152      	asrs	r2, r2, #5
 80012dc:	17db      	asrs	r3, r3, #31
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	4a58      	ldr	r2, [pc, #352]	; (8001444 <traffic_run+0x2b4>)
 80012e2:	6013      	str	r3, [r2, #0]
			  process_red();
 80012e4:	f7ff fd02 	bl	8000cec <process_red>
			  led_buffer[0] = led_set %10;
 80012e8:	4b56      	ldr	r3, [pc, #344]	; (8001444 <traffic_run+0x2b4>)
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	4b52      	ldr	r3, [pc, #328]	; (8001438 <traffic_run+0x2a8>)
 80012ee:	fb83 2301 	smull	r2, r3, r3, r1
 80012f2:	109a      	asrs	r2, r3, #2
 80012f4:	17cb      	asrs	r3, r1, #31
 80012f6:	1ad2      	subs	r2, r2, r3
 80012f8:	4613      	mov	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	4413      	add	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	1aca      	subs	r2, r1, r3
 8001302:	4b46      	ldr	r3, [pc, #280]	; (800141c <traffic_run+0x28c>)
 8001304:	601a      	str	r2, [r3, #0]
			  led_buffer[1] = (led_set/10);
 8001306:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <traffic_run+0x2b4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a4b      	ldr	r2, [pc, #300]	; (8001438 <traffic_run+0x2a8>)
 800130c:	fb82 1203 	smull	r1, r2, r2, r3
 8001310:	1092      	asrs	r2, r2, #2
 8001312:	17db      	asrs	r3, r3, #31
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4a41      	ldr	r2, [pc, #260]	; (800141c <traffic_run+0x28c>)
 8001318:	6053      	str	r3, [r2, #4]
			  led_buffer[2] = mode;
 800131a:	4b3f      	ldr	r3, [pc, #252]	; (8001418 <traffic_run+0x288>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a3f      	ldr	r2, [pc, #252]	; (800141c <traffic_run+0x28c>)
 8001320:	6093      	str	r3, [r2, #8]
			  led_buffer[3] = 0;
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <traffic_run+0x28c>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
			  break;
 8001328:	e074      	b.n	8001414 <traffic_run+0x284>
		  case 4:
			  yellow1(0);yellow2(0);
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fb0e 	bl	800094c <yellow1>
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fb59 	bl	80009e8 <yellow2>
			  red1(0);red2(0);
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff fad4 	bl	80008e4 <red1>
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fb1f 	bl	8000980 <red2>
			  led_set = set_green/100;
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <traffic_run+0x2b8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a3e      	ldr	r2, [pc, #248]	; (8001440 <traffic_run+0x2b0>)
 8001348:	fb82 1203 	smull	r1, r2, r2, r3
 800134c:	1152      	asrs	r2, r2, #5
 800134e:	17db      	asrs	r3, r3, #31
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	4a3c      	ldr	r2, [pc, #240]	; (8001444 <traffic_run+0x2b4>)
 8001354:	6013      	str	r3, [r2, #0]
			  process_green();
 8001356:	f7ff fd01 	bl	8000d5c <process_green>
			  led_buffer[0] = led_set%10;
 800135a:	4b3a      	ldr	r3, [pc, #232]	; (8001444 <traffic_run+0x2b4>)
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	4b36      	ldr	r3, [pc, #216]	; (8001438 <traffic_run+0x2a8>)
 8001360:	fb83 2301 	smull	r2, r3, r3, r1
 8001364:	109a      	asrs	r2, r3, #2
 8001366:	17cb      	asrs	r3, r1, #31
 8001368:	1ad2      	subs	r2, r2, r3
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	1aca      	subs	r2, r1, r3
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <traffic_run+0x28c>)
 8001376:	601a      	str	r2, [r3, #0]
			  led_buffer[1] = (led_set/10);
 8001378:	4b32      	ldr	r3, [pc, #200]	; (8001444 <traffic_run+0x2b4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a2e      	ldr	r2, [pc, #184]	; (8001438 <traffic_run+0x2a8>)
 800137e:	fb82 1203 	smull	r1, r2, r2, r3
 8001382:	1092      	asrs	r2, r2, #2
 8001384:	17db      	asrs	r3, r3, #31
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	4a24      	ldr	r2, [pc, #144]	; (800141c <traffic_run+0x28c>)
 800138a:	6053      	str	r3, [r2, #4]
			  led_buffer[2] = mode;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <traffic_run+0x288>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <traffic_run+0x28c>)
 8001392:	6093      	str	r3, [r2, #8]
			  led_buffer[3] = 0;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <traffic_run+0x28c>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]

			  break;
 800139a:	e03b      	b.n	8001414 <traffic_run+0x284>
		  case 3:
			  red1(0);red2(0);
 800139c:	2000      	movs	r0, #0
 800139e:	f7ff faa1 	bl	80008e4 <red1>
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff faec 	bl	8000980 <red2>
			  green1(0);green2(0);
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff fab5 	bl	8000918 <green1>
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fb00 	bl	80009b4 <green2>
			  led_set = set_yellow/100;
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <traffic_run+0x2bc>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <traffic_run+0x2b0>)
 80013ba:	fb82 1203 	smull	r1, r2, r2, r3
 80013be:	1152      	asrs	r2, r2, #5
 80013c0:	17db      	asrs	r3, r3, #31
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <traffic_run+0x2b4>)
 80013c6:	6013      	str	r3, [r2, #0]
			  process_yellow();
 80013c8:	f7ff fd00 	bl	8000dcc <process_yellow>
			  led_buffer[0] = led_set%10;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <traffic_run+0x2b4>)
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <traffic_run+0x2a8>)
 80013d2:	fb83 2301 	smull	r2, r3, r3, r1
 80013d6:	109a      	asrs	r2, r3, #2
 80013d8:	17cb      	asrs	r3, r1, #31
 80013da:	1ad2      	subs	r2, r2, r3
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	1aca      	subs	r2, r1, r3
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <traffic_run+0x28c>)
 80013e8:	601a      	str	r2, [r3, #0]
			  led_buffer[1] = (led_set/10);
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <traffic_run+0x2b4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <traffic_run+0x2a8>)
 80013f0:	fb82 1203 	smull	r1, r2, r2, r3
 80013f4:	1092      	asrs	r2, r2, #2
 80013f6:	17db      	asrs	r3, r3, #31
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <traffic_run+0x28c>)
 80013fc:	6053      	str	r3, [r2, #4]
			  led_buffer[2] = mode;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <traffic_run+0x288>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a06      	ldr	r2, [pc, #24]	; (800141c <traffic_run+0x28c>)
 8001404:	6093      	str	r3, [r2, #8]
			  led_buffer[3] = 0;
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <traffic_run+0x28c>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
			  break;
 800140c:	e002      	b.n	8001414 <traffic_run+0x284>
		  default:
			  break;
 800140e:	bf00      	nop
 8001410:	e000      	b.n	8001414 <traffic_run+0x284>
			  break;
 8001412:	bf00      	nop
		  }
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000094 	.word	0x20000094
 800141c:	20000034 	.word	0x20000034
 8001420:	200000a8 	.word	0x200000a8
 8001424:	200000ac 	.word	0x200000ac
 8001428:	200000a4 	.word	0x200000a4
 800142c:	200000cc 	.word	0x200000cc
 8001430:	20000084 	.word	0x20000084
 8001434:	20000088 	.word	0x20000088
 8001438:	66666667 	.word	0x66666667
 800143c:	20000098 	.word	0x20000098
 8001440:	51eb851f 	.word	0x51eb851f
 8001444:	200000b0 	.word	0x200000b0
 8001448:	2000009c 	.word	0x2000009c
 800144c:	200000a0 	.word	0x200000a0

08001450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001454:	4a0d      	ldr	r2, [pc, #52]	; (800148c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001476:	f7ff fe85 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f001 fb0d 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800147e:	f7ff facd 	bl	8000a1c <main>
  bx lr
 8001482:	4770      	bx	lr
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800148c:	08002b30 	.word	0x08002b30
  ldr r2, =_sbss
 8001490:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8001494:	20000128 	.word	0x20000128

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>
	...

0800149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x28>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x28>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 f923 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	200f      	movs	r0, #15
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fddc 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40022000 	.word	0x40022000

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 f93b 	bl	8001762 <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 f903 	bl	800170e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000044 	.word	0x20000044
 8001520:	2000004c 	.word	0x2000004c
 8001524:	20000048 	.word	0x20000048

08001528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_IncTick+0x1c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <HAL_IncTick+0x20>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <HAL_IncTick+0x20>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	2000004c 	.word	0x2000004c
 8001548:	20000124 	.word	0x20000124

0800154c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b02      	ldr	r3, [pc, #8]	; (800155c <HAL_GetTick+0x10>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000124 	.word	0x20000124

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <__NVIC_EnableIRQ+0x34>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff90 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff2d 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff42 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff35 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800177c:	b480      	push	{r7}
 800177e:	b08b      	sub	sp, #44	; 0x2c
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e148      	b.n	8001a22 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001790:	2201      	movs	r2, #1
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8137 	bne.w	8001a1c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4aa3      	ldr	r2, [pc, #652]	; (8001a40 <HAL_GPIO_Init+0x2c4>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d05e      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017b8:	4aa1      	ldr	r2, [pc, #644]	; (8001a40 <HAL_GPIO_Init+0x2c4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d875      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017be:	4aa1      	ldr	r2, [pc, #644]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d058      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017c4:	4a9f      	ldr	r2, [pc, #636]	; (8001a44 <HAL_GPIO_Init+0x2c8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d86f      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ca:	4a9f      	ldr	r2, [pc, #636]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017d0:	4a9d      	ldr	r2, [pc, #628]	; (8001a48 <HAL_GPIO_Init+0x2cc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d869      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017d6:	4a9d      	ldr	r2, [pc, #628]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d04c      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017dc:	4a9b      	ldr	r2, [pc, #620]	; (8001a4c <HAL_GPIO_Init+0x2d0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d863      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017e2:	4a9b      	ldr	r2, [pc, #620]	; (8001a50 <HAL_GPIO_Init+0x2d4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d046      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
 80017e8:	4a99      	ldr	r2, [pc, #612]	; (8001a50 <HAL_GPIO_Init+0x2d4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d85d      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017ee:	2b12      	cmp	r3, #18
 80017f0:	d82a      	bhi.n	8001848 <HAL_GPIO_Init+0xcc>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d859      	bhi.n	80018aa <HAL_GPIO_Init+0x12e>
 80017f6:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <HAL_GPIO_Init+0x80>)
 80017f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fc:	08001877 	.word	0x08001877
 8001800:	08001851 	.word	0x08001851
 8001804:	08001863 	.word	0x08001863
 8001808:	080018a5 	.word	0x080018a5
 800180c:	080018ab 	.word	0x080018ab
 8001810:	080018ab 	.word	0x080018ab
 8001814:	080018ab 	.word	0x080018ab
 8001818:	080018ab 	.word	0x080018ab
 800181c:	080018ab 	.word	0x080018ab
 8001820:	080018ab 	.word	0x080018ab
 8001824:	080018ab 	.word	0x080018ab
 8001828:	080018ab 	.word	0x080018ab
 800182c:	080018ab 	.word	0x080018ab
 8001830:	080018ab 	.word	0x080018ab
 8001834:	080018ab 	.word	0x080018ab
 8001838:	080018ab 	.word	0x080018ab
 800183c:	080018ab 	.word	0x080018ab
 8001840:	08001859 	.word	0x08001859
 8001844:	0800186d 	.word	0x0800186d
 8001848:	4a82      	ldr	r2, [pc, #520]	; (8001a54 <HAL_GPIO_Init+0x2d8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d013      	beq.n	8001876 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800184e:	e02c      	b.n	80018aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e029      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	3304      	adds	r3, #4
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e024      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	3308      	adds	r3, #8
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e01f      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	330c      	adds	r3, #12
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e01a      	b.n	80018ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800187e:	2304      	movs	r3, #4
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e013      	b.n	80018ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800188c:	2308      	movs	r3, #8
 800188e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	611a      	str	r2, [r3, #16]
          break;
 8001896:	e009      	b.n	80018ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001898:	2308      	movs	r3, #8
 800189a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	615a      	str	r2, [r3, #20]
          break;
 80018a2:	e003      	b.n	80018ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x130>
          break;
 80018aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d801      	bhi.n	80018b6 <HAL_GPIO_Init+0x13a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e001      	b.n	80018ba <HAL_GPIO_Init+0x13e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3304      	adds	r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	d802      	bhi.n	80018c8 <HAL_GPIO_Init+0x14c>
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x152>
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	3b08      	subs	r3, #8
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	210f      	movs	r1, #15
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	431a      	orrs	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8090 	beq.w	8001a1c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a55      	ldr	r2, [pc, #340]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_GPIO_Init+0x2dc>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001914:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a49      	ldr	r2, [pc, #292]	; (8001a60 <HAL_GPIO_Init+0x2e4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1e0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_GPIO_Init+0x2e8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1dc>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a47      	ldr	r2, [pc, #284]	; (8001a68 <HAL_GPIO_Init+0x2ec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001950:	2302      	movs	r3, #2
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001954:	2303      	movs	r3, #3
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1e2>
 800195c:	2300      	movs	r3, #0
 800195e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800196e:	493b      	ldr	r1, [pc, #236]	; (8001a5c <HAL_GPIO_Init+0x2e0>)
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4937      	ldr	r1, [pc, #220]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001996:	4b35      	ldr	r3, [pc, #212]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	4933      	ldr	r1, [pc, #204]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b2e      	ldr	r3, [pc, #184]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	492d      	ldr	r1, [pc, #180]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	4929      	ldr	r1, [pc, #164]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4923      	ldr	r1, [pc, #140]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	491f      	ldr	r1, [pc, #124]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4919      	ldr	r1, [pc, #100]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4915      	ldr	r1, [pc, #84]	; (8001a6c <HAL_GPIO_Init+0x2f0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	3301      	adds	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f47f aeaf 	bne.w	8001790 <HAL_GPIO_Init+0x14>
  }
}
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
 8001a36:	372c      	adds	r7, #44	; 0x2c
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10310000 	.word	0x10310000
 8001a48:	10220000 	.word	0x10220000
 8001a4c:	10210000 	.word	0x10210000
 8001a50:	10120000 	.word	0x10120000
 8001a54:	10110000 	.word	0x10110000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e001      	b.n	8001a92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aae:	787b      	ldrb	r3, [r7, #1]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab4:	887a      	ldrh	r2, [r7, #2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	611a      	str	r2, [r3, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	041a      	lsls	r2, r3, #16
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43d9      	mvns	r1, r3
 8001aec:	887b      	ldrh	r3, [r7, #2]
 8001aee:	400b      	ands	r3, r1
 8001af0:	431a      	orrs	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e26c      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8087 	beq.w	8001c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2c:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d112      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
 8001b38:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x12c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d168      	bne.n	8001c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e246      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x76>
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0xbc>
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6a      	ldr	r2, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a67      	ldr	r2, [pc, #412]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fcb6 	bl	800154c <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fcb2 	bl	800154c <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1fa      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe4>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fca2 	bl	800154c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fc9e 	bl	800154c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1e6      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x10c>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1ba      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4939      	ldr	r1, [pc, #228]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fc57 	bl	800154c <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fc53 	bl	800154c <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e19b      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4927      	ldr	r1, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fc36 	bl	800154c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fc32 	bl	800154c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e17a      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03a      	beq.n	8001d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d019      	beq.n	8001d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fc16 	bl	800154c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fc12 	bl	800154c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e15a      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 faa6 	bl	8002294 <RCC_Delay>
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff fbfc 	bl	800154c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fbf8 	bl	800154c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d908      	bls.n	8001d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e140      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	42420000 	.word	0x42420000
 8001d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b9e      	ldr	r3, [pc, #632]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e9      	bne.n	8001d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a6 	beq.w	8001ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b97      	ldr	r3, [pc, #604]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b94      	ldr	r3, [pc, #592]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a93      	ldr	r2, [pc, #588]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b91      	ldr	r3, [pc, #580]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b8e      	ldr	r3, [pc, #568]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b8b      	ldr	r3, [pc, #556]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a8a      	ldr	r2, [pc, #552]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff fbb9 	bl	800154c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7ff fbb5 	bl	800154c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0fd      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x4f8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x312>
 8001e04:	4b7b      	ldr	r3, [pc, #492]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e02d      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e1a:	4b76      	ldr	r3, [pc, #472]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a75      	ldr	r2, [pc, #468]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b73      	ldr	r3, [pc, #460]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	e01c      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x356>
 8001e3c:	4b6d      	ldr	r3, [pc, #436]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a6c      	ldr	r2, [pc, #432]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	4b6a      	ldr	r3, [pc, #424]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a69      	ldr	r2, [pc, #420]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e56:	4b67      	ldr	r3, [pc, #412]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a66      	ldr	r2, [pc, #408]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a63      	ldr	r2, [pc, #396]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7ff fb69 	bl	800154c <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff fb65 	bl	800154c <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0ab      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	4b57      	ldr	r3, [pc, #348]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ee      	beq.n	8001e7e <HAL_RCC_OscConfig+0x37e>
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb53 	bl	800154c <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fb4f 	bl	800154c <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e095      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b48      	ldr	r3, [pc, #288]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8081 	beq.w	8001fea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b42      	ldr	r3, [pc, #264]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d061      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d146      	bne.n	8001f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_RCC_OscConfig+0x4fc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7ff fb23 	bl	800154c <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff fb1f 	bl	800154c <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e067      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1c:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	492d      	ldr	r1, [pc, #180]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a19      	ldr	r1, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	430b      	orrs	r3, r1
 8001f56:	4927      	ldr	r1, [pc, #156]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x4fc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff faf3 	bl	800154c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff faef 	bl	800154c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e037      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46a>
 8001f88:	e02f      	b.n	8001fea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_RCC_OscConfig+0x4fc>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fadc 	bl	800154c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff fad8 	bl	800154c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e020      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x498>
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e013      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc4:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
 8001ffc:	42420060 	.word	0x42420060

08002000 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0d0      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4965      	ldr	r1, [pc, #404]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b8      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4b59      	ldr	r3, [pc, #356]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002066:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002074:	4b53      	ldr	r3, [pc, #332]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800207e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	494d      	ldr	r1, [pc, #308]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d040      	beq.n	8002120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d115      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b41      	ldr	r3, [pc, #260]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e073      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4936      	ldr	r1, [pc, #216]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7ff fa2c 	bl	800154c <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7ff fa28 	bl	800154c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e053      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d210      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4922      	ldr	r1, [pc, #136]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e032      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4916      	ldr	r1, [pc, #88]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	490e      	ldr	r1, [pc, #56]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800218e:	f000 f821 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	490a      	ldr	r1, [pc, #40]	; (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	; (80021cc <HAL_RCC_ClockConfig+0x1cc>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1d0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff f98a 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08002b18 	.word	0x08002b18
 80021cc:	20000044 	.word	0x20000044
 80021d0:	20000048 	.word	0x20000048

080021d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b490      	push	{r4, r7}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021dc:	1d3c      	adds	r4, r7, #4
 80021de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021e4:	f240 2301 	movw	r3, #513	; 0x201
 80021e8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	2b04      	cmp	r3, #4
 800220c:	d002      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x40>
 800220e:	2b08      	cmp	r3, #8
 8002210:	d003      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x46>
 8002212:	e02d      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002216:	623b      	str	r3, [r7, #32]
      break;
 8002218:	e02d      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	0c9b      	lsrs	r3, r3, #18
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002226:	4413      	add	r3, r2
 8002228:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800222c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_RCC_GetSysClockFreq+0xb4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	0c5b      	lsrs	r3, r3, #17
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002246:	4413      	add	r3, r2
 8002248:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800224c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	fb02 f203 	mul.w	r2, r2, r3
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	e004      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	623b      	str	r3, [r7, #32]
      break;
 800226e:	e002      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002272:	623b      	str	r3, [r7, #32]
      break;
 8002274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002276:	6a3b      	ldr	r3, [r7, #32]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bc90      	pop	{r4, r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	08002b08 	.word	0x08002b08
 8002288:	40021000 	.word	0x40021000
 800228c:	007a1200 	.word	0x007a1200
 8002290:	003d0900 	.word	0x003d0900

08002294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <RCC_Delay+0x34>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <RCC_Delay+0x38>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a5b      	lsrs	r3, r3, #9
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b0:	bf00      	nop
  }
  while (Delay --);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	60fa      	str	r2, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <RCC_Delay+0x1c>
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr
 80022c8:	20000044 	.word	0x20000044
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e041      	b.n	8002366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7fe feee 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2202      	movs	r2, #2
 8002300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	4619      	mov	r1, r3
 800230e:	4610      	mov	r0, r2
 8002310:	f000 fa6a 	bl	80027e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d001      	beq.n	8002388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e035      	b.n	80023f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_TIM_Base_Start_IT+0x90>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x4e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b2:	d004      	beq.n	80023be <HAL_TIM_Base_Start_IT+0x4e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a12      	ldr	r2, [pc, #72]	; (8002404 <HAL_TIM_Base_Start_IT+0x94>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d111      	bne.n	80023e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b06      	cmp	r3, #6
 80023ce:	d010      	beq.n	80023f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e0:	e007      	b.n	80023f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40012c00 	.word	0x40012c00
 8002404:	40000400 	.word	0x40000400

08002408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0202 	mvn.w	r2, #2
 8002434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f9b1 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f9a4 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f9b3 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0204 	mvn.w	r2, #4
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f987 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f97a 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f989 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0208 	mvn.w	r2, #8
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2204      	movs	r2, #4
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f95d 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f950 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f95f 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b10      	cmp	r3, #16
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0210 	mvn.w	r2, #16
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2208      	movs	r2, #8
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f933 	bl	80027b2 <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f926 	bl	80027a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f935 	bl	80027c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10e      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0201 	mvn.w	r2, #1
 8002584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fb9e 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa67 	bl	8002a86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d107      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8f9 	bl	80027d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0220 	mvn.w	r2, #32
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa32 	bl	8002a74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <HAL_TIM_ConfigClockSource+0x18>
 800262c:	2302      	movs	r3, #2
 800262e:	e0b3      	b.n	8002798 <HAL_TIM_ConfigClockSource+0x180>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800264e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002656:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002668:	d03e      	beq.n	80026e8 <HAL_TIM_ConfigClockSource+0xd0>
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266e:	f200 8087 	bhi.w	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	f000 8085 	beq.w	8002784 <HAL_TIM_ConfigClockSource+0x16c>
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267e:	d87f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002680:	2b70      	cmp	r3, #112	; 0x70
 8002682:	d01a      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0xa2>
 8002684:	2b70      	cmp	r3, #112	; 0x70
 8002686:	d87b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002688:	2b60      	cmp	r3, #96	; 0x60
 800268a:	d050      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x116>
 800268c:	2b60      	cmp	r3, #96	; 0x60
 800268e:	d877      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002690:	2b50      	cmp	r3, #80	; 0x50
 8002692:	d03c      	beq.n	800270e <HAL_TIM_ConfigClockSource+0xf6>
 8002694:	2b50      	cmp	r3, #80	; 0x50
 8002696:	d873      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d058      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x136>
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d86f      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 80026a0:	2b30      	cmp	r3, #48	; 0x30
 80026a2:	d064      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
 80026a4:	2b30      	cmp	r3, #48	; 0x30
 80026a6:	d86b      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d060      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	d867      	bhi.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d05c      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d05a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026b8:	e062      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f000 f95c 	bl	8002986 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	609a      	str	r2, [r3, #8]
      break;
 80026e6:	e04e      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6899      	ldr	r1, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f000 f945 	bl	8002986 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800270a:	609a      	str	r2, [r3, #8]
      break;
 800270c:	e03b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	f000 f8bc 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2150      	movs	r1, #80	; 0x50
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f913 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 800272c:	e02b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	461a      	mov	r2, r3
 800273c:	f000 f8da 	bl	80028f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2160      	movs	r1, #96	; 0x60
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f903 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 800274c:	e01b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 f89c 	bl	8002898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2140      	movs	r1, #64	; 0x40
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f8f3 	bl	8002952 <TIM_ITRx_SetConfig>
      break;
 800276c:	e00b      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f000 f8ea 	bl	8002952 <TIM_ITRx_SetConfig>
        break;
 800277e:	e002      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002784:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr

080027e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <TIM_Base_SetConfig+0xa8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d007      	beq.n	8002810 <TIM_Base_SetConfig+0x28>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d003      	beq.n	8002810 <TIM_Base_SetConfig+0x28>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <TIM_Base_SetConfig+0xac>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <TIM_Base_SetConfig+0xa8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <TIM_Base_SetConfig+0x52>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002830:	d003      	beq.n	800283a <TIM_Base_SetConfig+0x52>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a17      	ldr	r2, [pc, #92]	; (8002894 <TIM_Base_SetConfig+0xac>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <TIM_Base_SetConfig+0xa8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400

08002898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0201 	bic.w	r2, r3, #1
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 030a 	bic.w	r3, r3, #10
 80028d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 0210 	bic.w	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800291e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	031b      	lsls	r3, r3, #12
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002930:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002952:	b480      	push	{r7}
 8002954:	b085      	sub	sp, #20
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	f043 0307 	orr.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d8:	2302      	movs	r3, #2
 80029da:	e041      	b.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a14      	ldr	r2, [pc, #80]	; (8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d004      	beq.n	8002a34 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10c      	bne.n	8002a4e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400

08002a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	4d0c      	ldr	r5, [pc, #48]	; (8002ad0 <__libc_init_array+0x38>)
 8002a9e:	4c0d      	ldr	r4, [pc, #52]	; (8002ad4 <__libc_init_array+0x3c>)
 8002aa0:	1b64      	subs	r4, r4, r5
 8002aa2:	10a4      	asrs	r4, r4, #2
 8002aa4:	42a6      	cmp	r6, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	f000 f822 	bl	8002af0 <_init>
 8002aac:	2600      	movs	r6, #0
 8002aae:	4d0a      	ldr	r5, [pc, #40]	; (8002ad8 <__libc_init_array+0x40>)
 8002ab0:	4c0a      	ldr	r4, [pc, #40]	; (8002adc <__libc_init_array+0x44>)
 8002ab2:	1b64      	subs	r4, r4, r5
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	42a6      	cmp	r6, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac0:	4798      	blx	r3
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aca:	4798      	blx	r3
 8002acc:	3601      	adds	r6, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	08002b28 	.word	0x08002b28
 8002ad4:	08002b28 	.word	0x08002b28
 8002ad8:	08002b28 	.word	0x08002b28
 8002adc:	08002b2c 	.word	0x08002b2c

08002ae0 <memset>:
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4402      	add	r2, r0
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d100      	bne.n	8002aea <memset+0xa>
 8002ae8:	4770      	bx	lr
 8002aea:	f803 1b01 	strb.w	r1, [r3], #1
 8002aee:	e7f9      	b.n	8002ae4 <memset+0x4>

08002af0 <_init>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	bf00      	nop
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr

08002afc <_fini>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr
